using Cysharp.Threading.Tasks;
using System;
using System.Collections.Generic;
using System.Linq;
using Zenject;

public abstract class GameOperation : IExecutableTask {
    [Inject] protected readonly IVisualManager visualManager;
    [Inject] protected readonly IVisualTaskFactory visualTaskFactory;

    private readonly Dictionary<string, object> filledTargets = new();
    private readonly List<TargetInfo> targetInfos = new();

    public bool IsMandatory { get; set; }
    public UnitModel Source { get; set; }

    public abstract UniTask<bool> Execute();

    protected void AddTarget(TargetInfo targetInfo) {
        targetInfos.Add(targetInfo);
    }

    protected bool TryGetTypedTarget<T>(string key, out T result) {
        if (filledTargets.TryGetValue(key, out var unit) && unit is T casted) {
            result = casted;
            return true;
        }

        result = default;
        return false;
    }

    public void SetTarget(string key, object target) {
        if (!filledTargets.TryGetValue(key, out var targetBase)) {
            filledTargets[key] = target;
        } else {
            throw new Exception($"Target already set");
        }
    }

    public void SetTargets(IReadOnlyDictionary<string, object> filledTargets) {
        foreach (var kvp in filledTargets) {
            SetTarget(kvp.Key, kvp.Value);
        }
    }

    public bool IsReady() => !HaveUnfilledTargets();

    public bool HaveUnfilledTargets() {
        return filledTargets.Count != targetInfos.Count;
    }

    public void SetSource(UnitModel source) {
        Source = source;
    }

    public IEnumerable<string> GetTargetKeys() => filledTargets.Keys;
    public List<TargetInfo> GetTargets() => targetInfos.ToList();
}


public class TargetInfo {
   
    public string Key { get; }
    public object Unit { get; private set; }

    public ITargetRequirement Requirement { get; }
    public ITargetInstruction Instruction { get; }

    public bool HasTarget => Unit != null;

    public TargetInfo(string key, ITargetRequirement requirement, ITargetInstruction instruction = null) {
        Key = key;
        Requirement = requirement;
        Instruction = instruction ?? new AutoGeneratedInstruction(requirement);
    }

    public void SetTarget(object target) {
        Unit = target;
    }

    public object GetTarget() => Unit;

    public ValidationResult IsValid(object value = null, ValidationContext context = null) {
        return Requirement.IsValid(value, context);
    }

    public TargetSelector GetTargetSelector() {
        return Requirement.RequiredSelector;
    }

    public string GetInstruction(InstructionContext context = null) {
        context ??= new InstructionContext(Requirement);
        return Instruction.GetInstruction(context);
    }

    public string GetShortHint(InstructionContext context = null) {
        context ??= new InstructionContext(Requirement);
        return Instruction.GetShortHint(context);
    }

    public string GetDetailedHelp(InstructionContext context = null) {
        context ??= new InstructionContext(Requirement);
        return Instruction.GetDetailedHelp(context);
    }
}