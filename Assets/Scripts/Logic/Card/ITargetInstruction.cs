using System;
using System.Linq;

public interface ITargetInstruction {
    string GetInstruction(InstructionContext context);
    string GetShortHint(InstructionContext context);
    string GetDetailedHelp(InstructionContext context);
}

public interface ILocalizationService {
    string Get(string key);
}

public class InstructionContext {
    public ITargetRequirement Requirement { get; }
    public ValidationContext ValidationContext { get; }
    public object CurrentSelection { get; }
    public int TargetIndex { get; }
    public int TotalTargets { get; }

    public InstructionContext(
        ITargetRequirement requirement,
        ValidationContext validationContext = null,
        object currentSelection = null,
        int targetIndex = 0,
        int totalTargets = 1) {

        Requirement = requirement;
        ValidationContext = validationContext;
        CurrentSelection = currentSelection;
        TargetIndex = targetIndex;
        TotalTargets = totalTargets;
    }
}

public class SimpleTargetInstruction : ITargetInstruction {
    private readonly string _instruction;
    private readonly string _shortHint;
    private readonly string _detailedHelp;

    public SimpleTargetInstruction(string instruction, string shortHint = null, string detailedHelp = null) {
        _instruction = instruction;
        _shortHint = shortHint ?? instruction;
        _detailedHelp = detailedHelp ?? instruction;
    }

    public string GetInstruction(InstructionContext context) => _instruction;
    public string GetShortHint(InstructionContext context) => _shortHint;
    public string GetDetailedHelp(InstructionContext context) => _detailedHelp;
}

public class DynamicTargetInstruction : ITargetInstruction {
    private readonly Func<InstructionContext, string> _instructionGenerator;
    private readonly Func<InstructionContext, string> _hintGenerator;
    private readonly Func<InstructionContext, string> _helpGenerator;

    public DynamicTargetInstruction(
        Func<InstructionContext, string> instructionGenerator,
        Func<InstructionContext, string> hintGenerator = null,
        Func<InstructionContext, string> helpGenerator = null) {
        _instructionGenerator = instructionGenerator;
        _hintGenerator = hintGenerator ?? instructionGenerator;
        _helpGenerator = helpGenerator ?? instructionGenerator;
    }

    public string GetInstruction(InstructionContext context) => _instructionGenerator(context);
    public string GetShortHint(InstructionContext context) => _hintGenerator(context);
    public string GetDetailedHelp(InstructionContext context) => _helpGenerator(context);
}

public class AutoGeneratedInstruction : ITargetInstruction {
    private readonly ITargetRequirement _requirement;

    public AutoGeneratedInstruction(ITargetRequirement requirement) {
        _requirement = requirement;
    }

    public string GetInstruction(InstructionContext context) {
        return GenerateInstructionFromRequirement(_requirement);
    }

    public string GetShortHint(InstructionContext context) {
        return GetInstruction(context);
    }

    public string GetDetailedHelp(InstructionContext context) {
        var instruction = GetInstruction(context);
        var conditions = GetConditionsDescription(_requirement);
        return string.IsNullOrEmpty(conditions) ? instruction : $"{instruction}\n{conditions}";
    }

    private string GenerateInstructionFromRequirement(ITargetRequirement requirement) {
        // Логіка автогенерації на основі типу requirement
        if (requirement is CompositeTargetRequirement composite) {
            return "Select appropriate target"; // Можна розширити
        }

        var typeName = requirement.GetType().GetGenericArguments().FirstOrDefault()?.Name ?? "target";
        return $"Select {typeName}";
    }

    private string GetConditionsDescription(ITargetRequirement requirement) {
        // Генерує опис умов (можна розширити)
        return string.Empty;
    }
}

public class LocalizedInstruction : ITargetInstruction {
    private readonly string _localizationKey;
    private readonly ILocalizationService _localization;

    public LocalizedInstruction(string localizationKey, ILocalizationService localization) {
        _localizationKey = localizationKey;
        _localization = localization;
    }

    public string GetInstruction(InstructionContext context)
        => _localization.Get($"{_localizationKey}.instruction");

    public string GetShortHint(InstructionContext context)
        => _localization.Get($"{_localizationKey}.hint");

    public string GetDetailedHelp(InstructionContext context)
        => _localization.Get($"{_localizationKey}.help");
}